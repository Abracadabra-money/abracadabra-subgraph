type Protocol @entity {
  id: ID!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUsd: BigDecimal!

  " Amount of fees earned for the entire protocol "
  totalFeesGenerated: BigDecimal!

  " Total number of cauldrons "
  totalCauldronCount: Int!

  " All cauldrons that belong to this protocol "
  cauldrons: [Cauldron!]! @derivedFrom(field: "protocol")

  cauldronIds: [String!]!

  magicApe: MagicApe @derivedFrom(field: "protocol")

  magicGlp: MagicGlp @derivedFrom(field: "protocol")

  levelFinance: LevelFinance @derivedFrom(field: "protocol")

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Daily usage metrics for this protocol "
  usageMetrics: [UsageProtocolMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinanceialProtocolMetricsDailySnapshot!]! @derivedFrom(field: "protocol")
}

type UsageProtocolMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!
}

type FinanceialProtocolMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUsd: BigDecimal!

  " Amount of fees earned for the entire protocol "
  feesGenerated: BigDecimal!

  borrowFeesGenerated: BigDecimal!

  interestFeesGenerated: BigDecimal!

  liquidationFeesGenerated: BigDecimal!
}

type Cauldron @entity {
  " Smart contract address of the cauldron "
  id: ID!

  " The protocol this cauldron belongs to "
  protocol: Protocol!

  " Name of cauldron "
  name: String

  " Token that need to be deposited to take a position in cauldron "
  collateral: Collateral!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Amount of input token per full share of output token. Only applies when the output token exists (note this is a ratio and not a percentage value, i.e. 1.05 instead of 105%) "
  exchangeRate: BigInt!

  borrowOpeningFee: BigInt!

  collaterizationRate: BigInt!

  liquidationMultiplier: BigInt!

  interestPerSecond: BigInt!

  " Price per share of input token in USD "
  collateralPriceUsd: BigDecimal!

  " Is this cauldron active "
  isActive: Boolean!

  deprecated: Boolean!

  " Last activity in this cauldron "
  lastActive: BigInt!
  " Oracle address "
  oracle: Bytes

  oracleData: String
  " Amount of fees earned for the entire protocol "
  totalFeesGenerated: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Daily usage metrics for this protocol "
  usageMetrics: [UsageCauldronMetricsDailySnapshot!]! @derivedFrom(field: "cauldron")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinanceialCauldronMetricsDailySnapshot!]! @derivedFrom(field: "cauldron")

  " All positions in this market "
  accountsStates: [AccountState!]! @derivedFrom(field: "cauldron")
}

type UsageCauldronMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  cauldron: Cauldron!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!
}

type FinanceialCauldronMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  cauldron: Cauldron!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUsd: BigDecimal!

  " Amount of fees earned for the entire protocol "
  feesGenerated: BigDecimal!

  borrowFeesGenerated: BigDecimal!

  interestFeesGenerated: BigDecimal!

  liquidationFeesGenerated: BigDecimal!
}

type Collateral @entity {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUsd: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt

  " Optional field to track the timestamp of the last token price "
  lastPriceTimestamp: BigInt
}

type MagicApe @entity {
  " Smart contract address of the token "
  id: ID!

  " The protocol this cauldron belongs to "
  protocol: Protocol!

  " Total MagicApe rewards "
  totalRewards: BigDecimal!

  "Daily yield"
  yieldDailySnapshot: [MagicApeYieldDailySnapshot!]! @derivedFrom(field: "magicApe")

  " Daily Tvl "
  tvlDailySnapshot: [MagicApeTvlDailySnapshot!]! @derivedFrom(field: "magicApe")

  " Daily price changes "
  priceDailySnapshot: [MagicApePriceDailySnapshot!]! @derivedFrom(field: "magicApe")
}

type MagicApeYieldDailySnapshot @entity{
  " ID is # of days since Unix epoch time "
  id: ID!

  " MagicApe ref "
  magicApe: MagicApe!

  " Ape staking apr "
  apr: BigDecimal!

  " MagicApe staking apy"
  apy: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type MagicApeTvlDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " MagicApe ref "
  magicApe: MagicApe!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUsd: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type MagicApePriceDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " MagicApe ref "
  magicApe: MagicApe!

  price: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type MagicGlp @entity {
  " Smart contract address of the token "
  id: ID!

  " The protocol this cauldron belongs to "
  protocol: Protocol!

  " Total MagicApe rewards "
  totalRewards: BigDecimal!
}

type Account @entity {
  " { Account address } "
  id: ID!

  " All positions that belong to this account "
  states: [AccountState!]! @derivedFrom(field: "account")
}

type AccountState @entity {
  " { Account address }-{ Cauldron address }"
  id: ID!

  " Account that owns this position "
  account: Account!

  " The market in which this position was opened "
  cauldron: Cauldron!

  borrowPart: BigInt!

  collateralShare: BigInt!
}

type LevelFinance @entity {
  id: ID!

  " The protocol this cauldron belongs to "
  protocol: Protocol!

  senior: LevelFinanceSenior @derivedFrom(field: "levelFinance")

  mezzanine: LevelFinanceMezzanine @derivedFrom(field: "levelFinance")

  junior: LevelFinanceJunior @derivedFrom(field: "levelFinance")

  dailySnapshot: [LevelFinanceDailySnapshot!]! @derivedFrom(field: "levelFinance")
}

type LevelFinanceSenior  @entity {
  id: ID!

  levelFinance: LevelFinance!

  totalRewards: BigInt!
  
  lpPriceUsd: BigDecimal!
}

type LevelFinanceMezzanine  @entity {
  id: ID!

  levelFinance: LevelFinance!

  totalRewards: BigInt!

  lpPriceUsd: BigDecimal!
}

type LevelFinanceJunior  @entity {
  id: ID!

  levelFinance: LevelFinance!

  totalRewards: BigInt!

  lpPriceUsd: BigDecimal!
}

type LevelFinanceDailySnapshot @entity {
   " ID is # of days since Unix epoch time "
  id: ID!

  levelFinance: LevelFinance!

  juniorRewards: BigInt!

  juniorApy: BigDecimal!

  seniorRewards: BigInt!

  seniorApy: BigDecimal!

  mezzanineRewards: BigInt!

  mezzanineApy: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}